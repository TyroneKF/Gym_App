
--#####################################################################
DROP DATABASE IF EXISTS gymapp2;
CREATE DATABASE IF NOT EXISTS gymapp2;

use gymapp2;


--#####################################################################
DROP VIEW IF EXISTS total_plan_view;

DROP VIEW IF EXISTS total_meal_view;

DROP TABLE IF EXISTS priceDetails;
DROP TABLE IF EXISTS ingredients_in_meal;

DROP VIEW IF EXISTS total_meal_view;
DROP VIEW IF EXISTS ingredients_in_meal_calculation;

DROP TABLE IF EXISTS meals;
DROP TABLE IF EXISTS plans;

DROP TABLE IF EXISTS ingredients_info;


--#####################################################################

CREATE TABLE IF NOT EXISTS plans
 (
 -- PRIMARY KEYS
    PlanID INT  PRIMARY KEY AUTO_INCREMENT,
	Plan_Name VARCHAR(100) NOT NULL, 
    SelectedPlan BOOLEAN,  -- can be null
    CHECK(selectedPlan IN(true)),
    
	UNIQUE KEY unique_name (Plan_Name),
    UNIQUE KEY chosen_plan (selectedPlan)
);

--#####################################################################


CREATE TABLE IF NOT EXISTS meals
(
   MealID INT  PRIMARY KEY AUTO_INCREMENT,

   PlanID INT NOT NULL,
   FOREIGN KEY (PlanID) REFERENCES plans(PlanID),

   Meal_Name VARCHAR(100) NOT NULL,
   
   UNIQUE KEY No_Repeat_Meal_Names_In_Plan(PlanID, Meal_Name)  

);

--#####################################################################

CREATE TABLE IF NOT EXISTS ingredients_info
 (
    -- PRIMARY KEYS
    IngredientID INT  PRIMARY KEY AUTO_INCREMENT,

	Meassurement VARCHAR(6) NOT NULL,
	CHECK(Meassurement IN("Litres","Grams")),

	Ingredient_Name VARCHAR(100) NOT NULL,

	Ingredient_Type VARCHAR(100) NOT NULL,

	Based_On_Quantity DECIMAL(6,2) NOT NULL,


	CHECK(Ingredient_Type IN(“None Of The Above”, “Breads“, “Cereals”, ”Rice”, ”Pasta”, ”Noodles”, “Other Grains”, “Vegetables”,
    “Grains & Legumes”, “Fruit”, “Milk”, "Potatoes", "Smoothie", ”Yoghurt”, ”Cheese”, “Lean Meat”, ” Fish”, ”Poultry”, ”Eggs”, ”Nuts”,
     “Cereal Bars”, ”Frozen Fruit”, ”Frozen Vegetables” , ”Juice” , ”Meat” , ”Nuts & Seeds” , ”Pasta”)),

	Protein DECIMAL(6,2) NOT NULL,
	Carbohydrates DECIMAL(6,2) NOT NULL,
	Fat DECIMAL(6,2) NOT NULL,
	Saturated_Fat DECIMAL(6,2) NOT NULL,
	Salt DECIMAL(6,2) NOT NULL,
	Water_Content DECIMAL(6,2) NOT NULL,

	Calories DECIMAL(6,2) NOT NULL,


	UNIQUE KEY unique_ingredient_info (Ingredient_Name, Ingredient_Type, Protein, Carbohydrates, Fat, Saturated_Fat, Salt, Water_Content, Calories)
);

--#####################################################################

CREATE TABLE IF NOT EXISTS priceDetails
(
    IngredientID INT  NOT NULL,
	FOREIGN KEY (IngredientID) REFERENCES ingredients_info(IngredientID),

	Volume_Per_Unit DECIMAL(6,2) NOT NULL,
	Cost_Per_Unit DECIMAL(15,2) NOT NULL,

	Store VARCHAR(100) NOT NULL
);
--#####################################################################

CREATE TABLE IF NOT EXISTS ingredients_in_meal
(   
    Ingredients_Index INT  PRIMARY KEY AUTO_INCREMENT,
	
    MealID INT NOT NULL,
	FOREIGN KEY (MealID) REFERENCES meals(MealID),

    PlanID INT NOT NULL,
 	FOREIGN KEY (PlanID) REFERENCES plans(PlanID),

    IngredientID INT NOT NULL,
	FOREIGN KEY (IngredientID) REFERENCES ingredients_info(IngredientID),
 
	Quantity DECIMAL(15,2) NOT NULL,
	
	UNIQUE KEY IngredientID_For_Plan (Ingredients_Index, PlanID)
);
--#####################################################################

CREATE VIEW ingredients_in_meal_calculation AS 

SELECT

i.PlanID, i.MealID, i.Ingredients_Index,  i.IngredientID, i.Quantity, info.Ingredient_Name, 

IFNULL(ROUND((i.Quantity /p.Volume_Per_Unit)*p.Cost_Per_Unit,2),0) AS Ingredient_Cost,

IFNULL(ROUND((info.Protein /info.Based_On_Quantity)*i.Quantity,2),0) AS Protein,
IFNULL(ROUND((info.Carbohydrates /info.Based_On_Quantity)*i.Quantity,2),0) AS Carbohydrates,
IFNULL(ROUND((info.Fat /info.Based_On_Quantity)*i.Quantity,2),0) AS Fat,
IFNULL(ROUND((info.Saturated_Fat /info.Based_On_Quantity)*i.Quantity,2),0) AS Saturated_Fat,
IFNULL(ROUND((info.Salt /info.Based_On_Quantity)*i.Quantity,2),0) AS Salt,
IFNULL(ROUND((info.Water_Content /info.Based_On_Quantity)*i.Quantity,2),0) AS Water_Content,
IFNULL(ROUND((info.Calories /info.Based_On_Quantity)*i.Quantity,2),0) AS Calories,
'Delete Row' AS `Delete Button`

FROM ingredients_in_meal i, ingredients_info info, priceDetails p
 
WHERE i.IngredientID = info.IngredientID AND info.IngredientID = p.IngredientID;


--#####################################################################
DROP VIEW IF EXISTS total_meal_view;
CREATE VIEW total_meal_view AS

SELECT m.PlanID, m.MealID, m.Meal_Name, 

COUNT(i.IngredientID) as No_Of_Ingredients,
IFNULL(ROUND(SUM(Quantity),2),0) as Weight_OF_Meal, 
IFNULL(ROUND(SUM(Ingredient_Cost),2),0) as Total_Cost, 

IFNULL(ROUND(SUM(Protein),2),0) as Total_Protein, 
IFNULL(ROUND(SUM(Carbohydrates),2),0) as Total_Carbohydrates, 
IFNULL(ROUND(SUM(Fat),2),0) as Total_Fats, 
IFNULL(ROUND(SUM(Saturated_Fat),2),0) as Total_Saturated_Fat, 
IFNULL(ROUND(SUM(Salt),2),0) as Total_Salt, 
IFNULL(ROUND(SUM(Water_Content),2),0) as Total_Water_Content, 
IFNULL(ROUND(SUM(Calories),2),0) as Total_Calories

FROM  meals m

LEFT  JOIN ingredients_in_meal_calculation i
ON m.MealID = i.MealID

GROUP BY  m.MealID, m.PlanID; 
-- ######################################################


CREATE VIEW total_plan_view AS

SELECT P.PlanID,

COUNT(T.MealID) AS No_Of_Meals,

IFNULL(ROUND(SUM(T.No_Of_Ingredients),2),0) AS Ingredients_In_Plan,
IFNULL(ROUND(SUM(T.Weight_OF_Meal),2),0) AS Weight_In_Plan, 
IFNULL(ROUND(SUM(T.Total_Cost),2),0) AS Total_Cost, 

IFNULL(ROUND(SUM(T.Total_Protein),2),0) AS Protein_In_Plan, 
IFNULL(ROUND(SUM(T.Total_Carbohydrates),2),0) AS Carbohydrates_In_Plan, 
IFNULL(ROUND(SUM(T.Total_Fats),2),0) AS Fats_In_Plan, 
IFNULL(ROUND(SUM(T.Total_Saturated_Fat),2),0) AS Saturated_Fat_In_Plan, 
IFNULL(ROUND(SUM(T.Total_Salt),2),0) AS Salt_In_Plan, 
IFNULL(ROUND(SUM(T.Total_Water_Content),2),0) AS Content_In_Plan, 
IFNULL(ROUND(SUM(T.Total_Calories),2),0) AS Total_Calories_In_Plan

FROM plans P

LEFT  JOIN total_meal_view T
ON P.PlanID = T.PlanID

GROUP BY  PlanID; 

-- ######################################################
delete from priceDetails;
delete from ingredients_in_meal;
delete from meals;
delete from plans;
delete from ingredients_info;

-- ######################################################
-- plans Database Insert Statements
-- ######################################################

INSERT INTO plans  (SelectedPlan, Plan_Name) VALUES
(NULL, 'Temp_Plan'), 
(true, 'Non-Vegan Plan 1');


-- #####################################################
-- meals Database Insert Statements
-- #####################################################

INSERT INTO meals (PlanID, Meal_Name) VALUES
(2,'Fancy Meal'),
(2,'Full Meal'),
(2,'Empty Meal');


-- #####################################################
-- ingredients_info Database Insert Statements
-- #####################################################

INSERT INTO ingredients_info
(Meassurement, Ingredient_Name, Ingredient_Type, Based_On_Quantity,  Protein, Carbohydrates, Fat, Saturated_Fat, Salt, Water_Content, Calories)

VALUES
('Grams', 'None Of The Above', 'None Of The Above', 0,0,0,0,0,0,0,0),
( 'Grams', 'Carrot', 'Vegetables', 100, 0.90, 10.00, 0.20, 0.0, 69.00, 0.00, 41.00),
( 'Grams', 'Sweet Potato', 'Potatoes', 100, 1.60, 20.00, 0.10, 0.0, 55.00, 0.00, 86.00),
( 'Grams', 'Brown Pasta', 'Pasta', 100, 5.00, 25.00, 1.10, 0.2, 6.00, 0.00, 131.00);


-- #####################################################
-- priceDetails Database Insert Statements
-- #####################################################
INSERT INTO priceDetails
(IngredientID, Volume_Per_Unit, Cost_Per_Unit, Store)

VALUES

(1, 0.00, 0.00, 'N/A'),
(2, 1000.00, 0.43, 'ASDA'),
(3, 1000.00, 0.92, 'ASDA'),
(4, 500.00, 0.50, 'ASDA');

-- #####################################################
-- ingredients_in_meal Database Insert Statements
-- #####################################################

INSERT INTO ingredients_in_meal
(MealID, PlanID, IngredientID, Quantity)

VALUES

(2, 2, 1, 20.00),
(2, 2, 2, 20.00),
(2, 2, 2, 40.00),
(2, 2, 3, 260.00),


(1, 2, 2, 40.00);

--#################################################################################################
select * from meals;
select * from ingredients_in_meal_calculation;
select * from total_meal_view;
select * from total_plan_view;


select * from meals where planID = 1;
select * from ingredients_in_meal_calculation WHERE MealID = 26;