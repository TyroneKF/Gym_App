--#####################################################################--#####################################################################
--#####################################################################--#####################################################################
DROP DATABASE IF EXISTS gymapp12;
CREATE DATABASE IF NOT EXISTS gymapp12;

use gymapp12;

--#####################################################################

CREATE TABLE IF NOT EXISTS plans
 (
    -- PRIMARY KEYS
    PlanID INT  PRIMARY KEY AUTO_INCREMENT,
	
	Plan_Name VARCHAR(100) NOT NULL,
 
    SelectedPlan BOOLEAN,  -- can be null
    CHECK(SelectedPlan IN(true)),
	
    Vegan BOOLEAN  NOT NULL,
	
    UNIQUE KEY chosen_plan (selectedPlan)
);
--#####################################################################

CREATE TABLE IF NOT EXISTS ingredientTypes
(
    Ingredient_Type_ID INT  PRIMARY KEY AUTO_INCREMENT,
	
	Ingredient_Type_Name VARCHAR(100) NOT NULL,
	UNIQUE KEY unique_type_name (Ingredient_Type_Name)
);

--#####################################################################

CREATE TABLE IF NOT EXISTS ingredients_info
 (
    -- PRIMARY KEYS
    IngredientID INT  PRIMARY KEY AUTO_INCREMENT,

	Measurement VARCHAR(6) NOT NULL,
	CHECK(Measurement IN("Litres","Grams")),

	Ingredient_Name VARCHAR(100) NOT NULL,

	Ingredient_Type_ID  INT NOT NULL,
	FOREIGN KEY (Ingredient_Type_ID) REFERENCES ingredientTypes(Ingredient_Type_ID),

	Based_On_Quantity DECIMAL(7,2) NOT NULL,

	Protein DECIMAL(7,2) NOT NULL,
	
	Glycemic_Index INT NOT NULL,
	Carbohydrates DECIMAL(7,2) NOT NULL,
	Sugars_Of_Carbs DECIMAL(7,2) NOT NULL,
	Fibre DECIMAL(7,2) NOT NULL,
	
	Fat DECIMAL(7,2) NOT NULL,
	Saturated_Fat DECIMAL(7,2) NOT NULL,
	Salt DECIMAL(7,2) NOT NULL,
	Water_Content DECIMAL(7,2) NOT NULL,
	Liquid_Content DECIMAL(7,2) NOT NULL,

	Calories DECIMAL(7,2) NOT NULL,

	UNIQUE KEY unique_ingredient_info (Ingredient_Name)
);

--#####################################################################
CREATE TABLE IF NOT EXISTS stores
(
    -- PRIMARY KEYS
    StoreID INT  PRIMARY KEY AUTO_INCREMENT,
	Store_Name VARCHAR(255) NOT NULL,
	UNIQUE KEY unique_store_name (Store_Name)
 
);
--#####################################################################

CREATE TABLE IF NOT EXISTS ingredientInShops
(   
    -- PRIMARY KEY , UNIQUE To this Table
    PDID INT  PRIMARY KEY AUTO_INCREMENT,
	
    IngredientID INT  NOT NULL,
	FOREIGN KEY (IngredientID) REFERENCES ingredients_info(IngredientID),

	Volume_Per_Unit DECIMAL(7,2) NOT NULL,
	Cost_Per_Unit DECIMAL(7,2) NOT NULL,

	StoreID INT NOT NULL,
	FOREIGN KEY (StoreID) REFERENCES stores(StoreID),
	
    UNIQUE KEY Ingredient_In_Store(StoreID, IngredientID)	
);
--#####################################################################

CREATE TABLE IF NOT EXISTS mealsInPlan
(   
   MealInPlanID INT NOT NULL AUTO_INCREMENT,
   
   PlanID INT NOT NULL,
   FOREIGN KEY (PlanID) REFERENCES plans(PlanID),

   Meal_Name VARCHAR(100) NOT NULL,   
   
   PRIMARY KEY(MealInPlanID, PlanID),   
   UNIQUE KEY No_Repeat_Meal_Names_In_Plan(PlanID, Meal_Name) -- can't have 2 of the same meal_names in a plan   
);

--#####################################################################

CREATE TABLE IF NOT EXISTS dividedMealSections
(
   DivMealSectionsID INT AUTO_INCREMENT,
   
   MealInPlanID INT  NOT NULL,
   FOREIGN KEY (MealInPlanID) REFERENCES mealsInPlan (MealInPlanID),
   
   PlanID INT NOT NULL,
   FOREIGN KEY (PlanID) REFERENCES plans(PlanID),
   
   PRIMARY KEY(DivMealSectionsID, MealInPlanID, PlanID)   
);

--#####################################################################
CREATE TABLE IF NOT EXISTS ingredients_in_sections_of_meal
(   
    Ingredients_Index INT  AUTO_INCREMENT, 
	
    DivMealSectionsID INT NOT NULL,
	FOREIGN KEY (DivMealSectionsID) REFERENCES dividedMealSections(DivMealSectionsID),

    PlanID INT,
 	FOREIGN KEY (PlanID) REFERENCES plans(PlanID),

    IngredientID INT NOT NULL,
	FOREIGN KEY (IngredientID) REFERENCES ingredients_info(IngredientID),
 
	Quantity DECIMAL(15,2) NOT NULL,
	
	PDID INT NULL,
 	FOREIGN KEY (PDID) REFERENCES ingredientInShops(PDID),
	
	PRIMARY KEY (Ingredients_Index, PlanID),	
	UNIQUE KEY No_Repeat_Meals (Ingredients_Index, DivMealSectionsID, PlanID)	
);

--#####################################################################
CREATE VIEW ingredients_in_sections_of_meal_calculation AS 

SELECT

i.PlanID, i.DivMealSectionsID, i.Ingredients_Index,  i.IngredientID, i.Quantity,  
(SELECT t.Ingredient_Type_Name FROM ingredientTypes t WHERE t.Ingredient_Type_ID = info.Ingredient_Type_ID)  AS Ingredient_Type, 

info.Ingredient_Name, 

IFNULL(ROUND((i.Quantity /p.Volume_Per_Unit)*p.Cost_Per_Unit,2),0) AS Ingredient_Cost,
IFNULL(s.Store_Name,'N/A') AS  Supplier,

IFNULL(ROUND((info.Protein /info.Based_On_Quantity)*i.Quantity,2),0) AS Protein,
IFNULL(info.Glycemic_Index, -0) AS GI, 
IFNULL(ROUND((info.Carbohydrates /info.Based_On_Quantity)*i.Quantity,2),0) AS Carbohydrates,
IFNULL(ROUND((info.Sugars_Of_Carbs /info.Based_On_Quantity)*i.Quantity,2),0) AS Sugars_Of_Carbs,
IFNULL(ROUND((info.Fibre /info.Based_On_Quantity)*i.Quantity,2),0) AS Fibre,
IFNULL(ROUND((info.Fat /info.Based_On_Quantity)*i.Quantity,2),0) AS Fat,
IFNULL(ROUND((info.Saturated_Fat /info.Based_On_Quantity)*i.Quantity,2),0) AS Saturated_Fat,
IFNULL(ROUND((info.Salt /info.Based_On_Quantity)*i.Quantity,2),0) AS Salt,
IFNULL(ROUND((info.Water_Content /info.Based_On_Quantity)*i.Quantity,2),0) AS Water_Content,
IFNULL(ROUND((info.Liquid_Content /info.Based_On_Quantity)*i.Quantity,2),0) AS Liquid_Content,
IFNULL(ROUND((info.Calories /info.Based_On_Quantity)*i.Quantity,2),0) AS Calories,
'Delete Row' AS `Delete Button`

FROM ingredients_in_sections_of_meal i 
LEFT JOIN ingredients_info info ON  info.IngredientID = i.IngredientID 
LEFT JOIN ingredientInShops p ON p.PDID = i.PDID
LEFT JOIN stores s ON p.StoreID = s.StoreID;

--#####################################################################

CREATE VIEW total_meal_view AS

SELECT m.PlanID, m.MealInPlanID, m.Meal_Name, 

COUNT(i.IngredientID) as No_Of_Ingredients,
IFNULL(ROUND(SUM(Quantity),2),0) as Weight_OF_Meal, 
IFNULL(ROUND(SUM(Ingredient_Cost),2),0) as Total_Cost, 

IFNULL(ROUND(SUM(Protein),2),0) as Total_Protein, 
IFNULL(ROUND(SUM(Carbohydrates),2),0) as Total_Carbohydrates, 
IFNULL(ROUND(SUM(Sugars_Of_Carbs),2),0) as Total_Sugars_Of_Carbs, 
IFNULL(ROUND(SUM(Fibre),2),0) as Total_Fibre, 
IFNULL(ROUND(SUM(Fat),2),0) as Total_Fats, 
IFNULL(ROUND(SUM(Saturated_Fat),2),0) as Total_Saturated_Fat, 
IFNULL(ROUND(SUM(Salt),2),0) as Total_Salt, 
IFNULL(ROUND(SUM(Water_Content),2),0) as Total_Water_Content, 
IFNULL(ROUND(SUM(Liquid_Content),2),0) as Total_Liquid_Content, 
IFNULL(ROUND(SUM(Calories),2),0) as Total_Calories

FROM  mealsInPlan m

LEFT  JOIN ingredients_in_sections_of_meal_calculation i
ON m.MealInPlanID = i.MealInPlanID AND m.PlanID = i.PlanID

GROUP BY  m.MealInPlanID, m.PlanID;